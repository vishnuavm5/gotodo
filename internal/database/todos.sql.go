// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id,title,description,created_at,updated_at,user_id)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING title,description
`

type CreateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UserID      uuid.UUID
}

type CreateTodoRow struct {
	Title       string
	Description string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (CreateTodoRow, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i CreateTodoRow
	err := row.Scan(&i.Title, &i.Description)
	return i, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todos WHERE id=$1 and user_id=$2
`

type DeleteTodoByIdParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteTodoById(ctx context.Context, arg DeleteTodoByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, arg.ID, arg.UserID)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT title,id,description FROM todos WHERE id=$1
`

type GetTodoByIdRow struct {
	Title       string
	ID          uuid.UUID
	Description string
}

func (q *Queries) GetTodoById(ctx context.Context, id uuid.UUID) (GetTodoByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i GetTodoByIdRow
	err := row.Scan(&i.Title, &i.ID, &i.Description)
	return i, err
}

const getTodoList = `-- name: GetTodoList :many
SELECT title,id,description FROM todos WHERE user_id=$1
`

type GetTodoListRow struct {
	Title       string
	ID          uuid.UUID
	Description string
}

func (q *Queries) GetTodoList(ctx context.Context, userID uuid.UUID) ([]GetTodoListRow, error) {
	rows, err := q.db.QueryContext(ctx, getTodoList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodoListRow
	for rows.Next() {
		var i GetTodoListRow
		if err := rows.Scan(&i.Title, &i.ID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoById = `-- name: UpdateTodoById :one
UPDATE todos
SET title=$1,description=$2 WHERE id=$3 AND user_id=$4
RETURNING title,description,id
`

type UpdateTodoByIdParams struct {
	Title       string
	Description string
	ID          uuid.UUID
	UserID      uuid.UUID
}

type UpdateTodoByIdRow struct {
	Title       string
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateTodoById(ctx context.Context, arg UpdateTodoByIdParams) (UpdateTodoByIdRow, error) {
	row := q.db.QueryRowContext(ctx, updateTodoById,
		arg.Title,
		arg.Description,
		arg.ID,
		arg.UserID,
	)
	var i UpdateTodoByIdRow
	err := row.Scan(&i.Title, &i.Description, &i.ID)
	return i, err
}
